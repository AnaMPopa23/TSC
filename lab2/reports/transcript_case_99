# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 17:40:52 on Apr 22,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 17:40:53 on Apr 22,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case_99 -GWR_NR=50 -GRD_NR=32 -GWRITE_ORDER=2 -GSEED_VAL=1236980 -GREAD_ORDER=2 
# Start time: 17:40:53 on Apr 22,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU      ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# After randomize transaction function: op_a = 8, op_b =4, opcode = 6, time = 36 
# 
# Writing to register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 8
#   operand_b = 4
# 
# After randomize transaction function: op_a = -12, op_b =5, opcode = 2, time = 46 
# 
# Writing to register location 18: 
#   opcode = 2 (PASSB)
#   operand_a = -12
#   operand_b = 5
# 
# After randomize transaction function: op_a = 5, op_b =2, opcode = 4, time = 56 
# 
# Writing to register location 10: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 2
# 
# After randomize transaction function: op_a = -14, op_b =10, opcode = 3, time = 66 
# 
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -14
#   operand_b = 10
# 
# After randomize transaction function: op_a = -6, op_b =13, opcode = 8, time = 76 
# 
# Writing to register location 10: 
#   opcode = 8 (POW)
#   operand_a = -6
#   operand_b = 13
# 
# After randomize transaction function: op_a = -3, op_b =10, opcode = 8, time = 86 
# 
# Writing to register location 31: 
#   opcode = 8 (POW)
#   operand_a = -3
#   operand_b = 10
# 
# After randomize transaction function: op_a = -6, op_b =15, opcode = 8, time = 96 
# 
# Writing to register location 0: 
#   opcode = 8 (POW)
#   operand_a = -6
#   operand_b = 15
# 
# After randomize transaction function: op_a = 15, op_b =0, opcode = 4, time = 106 
# 
# Writing to register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 15
#   operand_b = 0
# 
# After randomize transaction function: op_a = 0, op_b =2, opcode = 4, time = 116 
# 
# Writing to register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 2
# 
# After randomize transaction function: op_a = 2, op_b =2, opcode = 5, time = 126 
# 
# Writing to register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 2
#   operand_b = 2
# 
# After randomize transaction function: op_a = 2, op_b =13, opcode = 7, time = 136 
# 
# Writing to register location 25: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 13
# 
# After randomize transaction function: op_a = 13, op_b =9, opcode = 6, time = 146 
# 
# Writing to register location 27: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 9
# 
# After randomize transaction function: op_a = -7, op_b =11, opcode = 3, time = 156 
# 
# Writing to register location 26: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 11
# 
# After randomize transaction function: op_a = -5, op_b =10, opcode = 7, time = 166 
# 
# Writing to register location 27: 
#   opcode = 7 (MOD)
#   operand_a = -5
#   operand_b = 10
# 
# After randomize transaction function: op_a = 10, op_b =11, opcode = 8, time = 176 
# 
# Writing to register location 14: 
#   opcode = 8 (POW)
#   operand_a = 10
#   operand_b = 11
# 
# After randomize transaction function: op_a = 11, op_b =14, opcode = 8, time = 186 
# 
# Writing to register location 31: 
#   opcode = 8 (POW)
#   operand_a = 11
#   operand_b = 14
# 
# After randomize transaction function: op_a = 14, op_b =15, opcode = 2, time = 196 
# 
# Writing to register location 17: 
#   opcode = 2 (PASSB)
#   operand_a = 14
#   operand_b = 15
# 
# After randomize transaction function: op_a = 15, op_b =1, opcode = 7, time = 206 
# 
# Writing to register location 6: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 1
# 
# After randomize transaction function: op_a = 1, op_b =6, opcode = 6, time = 216 
# 
# Writing to register location 22: 
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 6
# 
# After randomize transaction function: op_a = -10, op_b =6, opcode = 5, time = 226 
# 
# Writing to register location 29: 
#   opcode = 5 (MULT)
#   operand_a = -10
#   operand_b = 6
# 
# After randomize transaction function: op_a = 6, op_b =13, opcode = 6, time = 236 
# 
# Writing to register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 6
#   operand_b = 13
# 
# After randomize transaction function: op_a = 13, op_b =14, opcode = 1, time = 246 
# 
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 14
# 
# After randomize transaction function: op_a = -2, op_b =10, opcode = 1, time = 256 
# 
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 10
# 
# After randomize transaction function: op_a = 10, op_b =10, opcode = 5, time = 266 
# 
# Writing to register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 10
# 
# After randomize transaction function: op_a = -6, op_b =1, opcode = 6, time = 276 
# 
# Writing to register location 14: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 1
# 
# After randomize transaction function: op_a = 1, op_b =14, opcode = 1, time = 286 
# 
# Writing to register location 12: 
#   opcode = 1 (PASSA)
#   operand_a = 1
#   operand_b = 14
# 
# After randomize transaction function: op_a = 14, op_b =12, opcode = 3, time = 296 
# 
# Writing to register location 28: 
#   opcode = 3 (ADD)
#   operand_a = 14
#   operand_b = 12
# 
# After randomize transaction function: op_a = -4, op_b =12, opcode = 0, time = 306 
# 
# Writing to register location 3: 
#   opcode = 0 (ZERO)
#   operand_a = -4
#   operand_b = 12
# 
# After randomize transaction function: op_a = 12, op_b =3, opcode = 0, time = 316 
# 
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 3
# 
# After randomize transaction function: op_a = 3, op_b =11, opcode = 1, time = 326 
# 
# Writing to register location 15: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 11
# 
# After randomize transaction function: op_a = 11, op_b =15, opcode = 4, time = 336 
# 
# Writing to register location 28: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 15
# 
# After randomize transaction function: op_a = -1, op_b =12, opcode = 0, time = 346 
# 
# Writing to register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = -1
#   operand_b = 12
# 
# After randomize transaction function: op_a = -4, op_b =12, opcode = 1, time = 356 
# 
# Writing to register location 27: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 12
# 
# After randomize transaction function: op_a = -4, op_b =11, opcode = 3, time = 366 
# 
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -4
#   operand_b = 11
# 
# After randomize transaction function: op_a = -5, op_b =13, opcode = 0, time = 376 
# 
# Writing to register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = -5
#   operand_b = 13
# 
# After randomize transaction function: op_a = -3, op_b =14, opcode = 3, time = 386 
# 
# Writing to register location 9: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 14
# 
# After randomize transaction function: op_a = 14, op_b =9, opcode = 1, time = 396 
# 
# Writing to register location 15: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 9
# 
# After randomize transaction function: op_a = 9, op_b =15, opcode = 0, time = 406 
# 
# Writing to register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 15
# 
# After randomize transaction function: op_a = -1, op_b =4, opcode = 0, time = 416 
# 
# Writing to register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = -1
#   operand_b = 4
# 
# After randomize transaction function: op_a = 4, op_b =4, opcode = 8, time = 426 
# 
# Writing to register location 2: 
#   opcode = 8 (POW)
#   operand_a = 4
#   operand_b = 4
# 
# After randomize transaction function: op_a = -12, op_b =2, opcode = 8, time = 436 
# 
# Writing to register location 24: 
#   opcode = 8 (POW)
#   operand_a = -12
#   operand_b = 2
# 
# After randomize transaction function: op_a = -14, op_b =8, opcode = 6, time = 446 
# 
# Writing to register location 18: 
#   opcode = 6 (DIV)
#   operand_a = -14
#   operand_b = 8
# 
# After randomize transaction function: op_a = -8, op_b =2, opcode = 0, time = 456 
# 
# Writing to register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
# 
# After randomize transaction function: op_a = 2, op_b =4, opcode = 7, time = 466 
# 
# Writing to register location 5: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 4
# 
# After randomize transaction function: op_a = -12, op_b =5, opcode = 0, time = 476 
# 
# Writing to register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 5
# 
# After randomize transaction function: op_a = -11, op_b =3, opcode = 8, time = 486 
# 
# Writing to register location 12: 
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
# 
# After randomize transaction function: op_a = 3, op_b =12, opcode = 4, time = 496 
# 
# Writing to register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
# 
# After randomize transaction function: op_a = 12, op_b =2, opcode = 2, time = 506 
# 
# Writing to register location 7: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 2
# 
# After randomize transaction function: op_a = -14, op_b =7, opcode = 0, time = 516 
# 
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 7
# 
# After randomize transaction function: op_a = 7, op_b =11, opcode = 5, time = 526 
# 
# Writing to register location 9: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 11
# 
# 
# Reading back the same register locations written...
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = -5
#   operand_b = 13
#   rezultat = 0
# 
# 
# Check result function location 14:
#   opcode = 0 (ZERO)
#   operand_a = -5
#   operand_b = 13
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 22: 
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 6
#   rezultat = 0
# 
# 
# Check result function location 22:
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 6
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 24: 
#   opcode = 8 (POW)
#   operand_a = -12
#   operand_b = 2
#   rezultat = 144
# 
# 
# Check result function location 24:
#   opcode = 8 (POW)
#   operand_a = -12
#   operand_b = 2
#   test result: 144
# 
#   result = 144
# 
# The result is correct! :) 
# 
# Read from register location 7: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 2
#   rezultat = 2
# 
# 
# Check result function location 7:
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 2
#   test result: 2
# 
#   result = 2
# 
# The result is correct! :) 
# 
# Read from register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   rezultat = -9
# 
# 
# Check result function location 18:
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   test result: -9
# 
#   result = -9
# 
# The result is correct! :) 
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
#   rezultat = 0
# 
# 
# Check result function location 4:
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 12: 
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
#   rezultat = -1331
# 
# 
# Check result function location 12:
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
#   test result: -1331
# 
#   result = -1331
# 
# The result is correct! :) 
# 
# Read from register location 24: 
#   opcode = 8 (POW)
#   operand_a = -12
#   operand_b = 2
#   rezultat = 144
# 
# 
# Check result function location 24:
#   opcode = 8 (POW)
#   operand_a = -12
#   operand_b = 2
#   test result: 144
# 
#   result = 144
# 
# The result is correct! :) 
# 
# Read from register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   rezultat = -9
# 
# 
# Check result function location 18:
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   test result: -9
# 
#   result = -9
# 
# The result is correct! :) 
# 
# Read from register location 15: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 9
#   rezultat = 14
# 
# 
# Check result function location 15:
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 9
#   test result: 14
# 
#   result = 14
# 
# The result is correct! :) 
# 
# Read from register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 10
#   rezultat = -2
# 
# 
# Check result function location 26:
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 10
#   test result: -2
# 
#   result = -2
# 
# The result is correct! :) 
# 
# Read from register location 19: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 5
#   rezultat = 0
# 
# 
# Check result function location 19:
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 5
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 15
#   rezultat = 0
# 
# 
# Check result function location 20:
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 15
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 13
#   rezultat = 2
# 
# 
# Check result function location 25:
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 13
#   test result: 2
# 
#   result = 2
# 
# The result is correct! :) 
# 
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
#   rezultat = 0
# 
# 
# Check result function location 4:
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 22: 
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 6
#   rezultat = 0
# 
# 
# Check result function location 22:
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 6
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 15
#   rezultat = 0
# 
# 
# Check result function location 20:
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 15
#   test result: 0
# 
#   result = 0
# 
# The result is correct! :) 
# 
# Read from register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   rezultat = -9
# 
# 
# Check result function location 18:
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   test result: -9
# 
#   result = -9
# 
# The result is correct! :) 
# 
# Read from register location 18: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   rezultat = -9
# 
# 
# Check result function location 18:
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 12
#   test result: -9
# 
#   result = -9
# 
# The result is correct! :) 
# 
# Read from register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 12: 
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
#   rezultat = -1331
# 
# 
# Check result function location 12:
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
#   test result: -1331
# 
#   result = -1331
# 
# The result is correct! :) 
# 
# Read from register location 12: 
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
#   rezultat = -1331
# 
# 
# Check result function location 12:
#   opcode = 8 (POW)
#   operand_a = -11
#   operand_b = 3
#   test result: -1331
# 
#   result = -1331
# 
# The result is correct! :) 
# 
# Read from register location 28: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 15
#   rezultat = -4
# 
# 
# Check result function location 28:
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 15
#   test result: -4
# 
#   result = -4
# 
# The result is correct! :) 
# 
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 2
#   operand_b = 2
#   rezultat = 4
# 
# 
# Check result function location 13:
#   opcode = 5 (MULT)
#   operand_a = 2
#   operand_b = 2
#   test result: 4
# 
#   result = 4
# 
# The result is correct! :) 
# 
# Read from register location 5: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 4
#   rezultat = 2
# 
# 
# Check result function location 5:
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 4
#   test result: 2
# 
#   result = 2
# 
# The result is correct! :) 
# 
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 13
#   rezultat = 2
# 
# 
# Check result function location 25:
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 13
#   test result: 2
# 
#   result = 2
# 
# The result is correct! :) 
# 
# 
# TEST RESULT
# Passed tests: 25. Total tests: 25.
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU      ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(106)
#    Time: 886 ns  Iteration: 1  Instance: /top/test
# End time: 17:40:53 on Apr 22,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
